#!/bin/sh

# Set variables for printing to the command line.
RED='\033[1;31m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
NC='\033[0m'

PASS=true

# Run Aspell on staged markdown files.
ASPELL=$(which aspell)
if [ $? != 0 ]; then
  printf "${RED}\nPlease install Aspell with homebrew before proceeding.\n${NC}"
  PASS=false
else
  for FILE in $(git diff-index --cached HEAD --name-only | grep -E '.md')
  do
    WORDS=$(cat $FILE | aspell --lang=en --extra-dicts='en-tfr.pws' list)

    # Print Aspell words.
    if [ ! -z "$WORDS" ]; then
      printf "${RED}\nAspell found some potentially misspelled words in $FILE.
${YELLOW}Correct the following words or add them to the custom dictionary:\n${NC}"
      for word in "$WORDS"; do
        printf "%-8s\n" "${word}"
      done | column
      PASS=false
    fi
  done
fi

# Run markdown lint (mdl).
MD_ERRORS=$(bundle exec mdl . -c .mdlrc --git-recurse)
RESULT=$?

# Print mdl errors.
if [ $RESULT != 0 ]; then
  printf "${RED}\nmarkdownlint failed.
${YELLOW}Correct the following markdown errors before committing:\n${NC}"
  echo "$MD_ERRORS"
  PASS=false
fi

# Run proselint on staged markdown and HTML files.
PROSELINT=$(which proselint)
if [ $? != 0 ]; then
  printf "${RED}\nPlease install proselint with pip before proceeding.\n${NC}"
  PASS=false
else
  SUGGESTIONS=$(git diff-index --cached HEAD --name-only | grep -E '.md|.html' | xargs proselint)
  RESULT=$?

  # Print proselint suggestions.
  if [ $RESULT != 0 ]; then
    printf "${RED}\nproselint has some suggestions for you.
${YELLOW}You can ignore these suggestions and proceed with your
commit by running git commit with the --no-verify tag.
Don't worry, proselint is a bit picky!\n\n${NC}"
    echo "$SUGGESTIONS"
    PASS=false
  fi
fi

# Check for Drupal Planet tag and summary if relevant.
DASHES="---"
for FILE in $(git diff-index --cached HEAD --name-only | grep -E '_posts')
do
  FRONT_MATTER=$(sed -n '/^---$/,/^---$/p' $FILE)
  FRONT_MATTER=${FRONT_MATTER#${DASHES}}
  FRONT_MATTER=${FRONT_MATTER%${DASHES}}

  # If it's a Drupal post...
  if [[ $FRONT_MATTER == *" drupal"* ]]; then
    # Check for the Drupal Planet tag...
    if [[ $FRONT_MATTER == *" drupal-planet"* ]]; then
      # If that's found, check for a Drupal Planet summary.
      if [[ $FRONT_MATTER != *"drupal_planet_summary:"* ]]; then
        printf "${RED}\nYour post $FILE is missing a Drupal Planet summary.
${YELLOW}Please include a Drupal Planet summary in your post's front matter.\n\n${NC}"
        PASS=false
      fi
    else
      printf "${YELLOW}\nYou've tagged $FILE as a Drupal post.
If appropriate, you should consider including the Drupal Planet tag and
summary as well. To ignore this and proceed, use git commit --no-verify.\n\n${NC}"
      PASS=false
    fi
  fi
done

# If there are image files, remind the developer to optimize them.
IMAGES=$(git diff-index --cached HEAD --name-only | grep -E '.jpg|.JPG|.jpeg|.JPEG|.png|.PNG|.svg|.SVG|.gif|.GIF|.webp|.WEBP|.tif|.TIF | xargs echo')
if [ $? = 0 ]; then
  printf "${YELLOW}\nAre you committing a new image? If so, please run:\n
  ${CYAN}gulp optimize:images\n
${YELLOW}Then add the optimized image file and run git commit --no-verify to avoid seeing
this message again.\n\n${NC}"
  PASS=false
fi

# If there were no failures, proceed with commit.
if $PASS; then
  exit 0
fi

exit 1